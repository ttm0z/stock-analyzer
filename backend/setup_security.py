#!/usr/bin/env python3
"""
Security setup script for Stock Analyzer
Run this script to complete the security configuration
"""
import os
import secrets
import getpass
from urllib.parse import urlparse

def generate_secret_key(length=32):
    """Generate a secure secret key"""
    return secrets.token_urlsafe(length)

def get_database_password():
    """Get secure database password"""
    print("\n🔐 Database Security Setup")
    print("Current database URL uses weak credentials!")
    print("Please provide a strong database password (minimum 16 characters)")
    
    while True:
        password = getpass.getpass("Enter new database password: ")
        if len(password) < 16:
            print("❌ Password too short. Minimum 16 characters required.")
            continue
        
        confirm = getpass.getpass("Confirm password: ")
        if password != confirm:
            print("❌ Passwords don't match. Try again.")
            continue
        
        return password

def get_redis_password():
    """Get Redis password"""
    print("\n🔐 Redis Security Setup")
    print("Please provide a strong Redis password (minimum 16 characters)")
    
    while True:
        password = getpass.getpass("Enter Redis password: ")
        if len(password) < 16:
            print("❌ Password too short. Minimum 16 characters required.")
            continue
        return password

def get_api_keys():
    """Get API keys"""
    print("\n🔑 API Keys Setup")
    print("Please provide your new API keys (after revoking the exposed ones)")
    
    fmp_key = input("Enter new FMP API key: ").strip()
    alpha_key = input("Enter new Alpha Vantage API key: ").strip()
    
    return fmp_key, alpha_key

def update_env_file():
    """Update .env file with secure configuration"""
    env_path = ".env"
    
    print("\n🛠️  Generating secure configuration...")
    
    # Generate secure keys
    flask_secret = generate_secret_key(32)
    jwt_secret = generate_secret_key(32)
    password_salt = generate_secret_key(16)
    
    # Get user inputs
    db_password = get_database_password()
    redis_password = get_redis_password()
    fmp_key, alpha_key = get_api_keys()
    
    # Create secure .env content
    env_content = f"""# SECURE CONFIGURATION - Generated by setup_security.py
# DO NOT COMMIT THIS FILE TO VERSION CONTROL

# Database Configuration
DATABASE_URL=postgresql://stockuser:{db_password}@localhost:5432/stockdb

# API Keys
ALPHA_VANTAGE_API_KEY={alpha_key}
FMP_API_KEY={fmp_key}

# Redis Configuration
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD={redis_password}
REDIS_MAX_CONNECTIONS=50

# Cache Configuration
CACHE_DEFAULT_TTL=300
CACHE_KEY_PREFIX=stock_app

# Flask Configuration
FLASK_ENV=development
FLASK_SECRET_KEY={flask_secret}
FLASK_HOST=127.0.0.1
FLASK_PORT=5000

# Security Configuration
JWT_SECRET_KEY={jwt_secret}
PASSWORD_SALT={password_salt}

# CORS Configuration
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173

# Logging
LOG_LEVEL=INFO
"""
    
    # Write to .env file
    with open(env_path, 'w') as f:
        f.write(env_content)
    
    print(f"✅ Secure configuration written to {env_path}")

def update_redis_config():
    """Update Redis configuration"""
    redis_conf_path = "app/redis.conf"
    
    if not os.path.exists(redis_conf_path):
        print(f"⚠️  Redis config file not found at {redis_conf_path}")
        return
    
    print(f"✅ Redis configuration is already updated in {redis_conf_path}")
    print("   Remember to update the password in the config file to match your .env")

def create_database_setup_script():
    """Create database setup script"""
    script_content = """#!/bin/bash
# Database setup script
# Run this to create the database and user

echo "🗄️  Setting up PostgreSQL database..."

# Create database user (run as postgres user)
sudo -u postgres psql -c "CREATE USER stockuser WITH PASSWORD 'YOUR_SECURE_PASSWORD_HERE';"
sudo -u postgres psql -c "CREATE DATABASE stockdb OWNER stockuser;"
sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE stockdb TO stockuser;"

echo "✅ Database setup complete!"
echo "Remember to update YOUR_SECURE_PASSWORD_HERE with your actual password"
"""
    
    with open("setup_database.sh", 'w') as f:
        f.write(script_content)
    
    os.chmod("setup_database.sh", 0o755)
    print("✅ Database setup script created: setup_database.sh")

def main():
    """Main setup function"""
    print("🔒 Stock Analyzer Security Setup")
    print("=" * 50)
    print("This script will help you secure your application.")
    print("Make sure you have already:")
    print("1. ✅ Revoked the exposed API keys")
    print("2. ✅ Generated new API keys")
    print("3. ✅ Installed Redis server")
    print("4. ✅ Set up PostgreSQL")
    print()
    
    confirm = input("Continue with security setup? [y/N]: ")
    if confirm.lower() != 'y':
        print("Setup cancelled.")
        return
    
    try:
        # Update environment file
        update_env_file()
        
        # Update Redis config
        update_redis_config()
        
        # Create database setup script
        create_database_setup_script()
        
        print("\n🎉 Security setup complete!")
        print("\n📋 Next steps:")
        print("1. Run: pip install -r requirements.txt")
        print("2. Update Redis password in app/redis.conf")
        print("3. Run: ./setup_database.sh (as root/sudo)")
        print("4. Start Redis: redis-server app/redis.conf")
        print("5. Run database migrations: flask db upgrade")
        print("6. Test the application")
        print("\n⚠️  Important: Verify .env is in .gitignore!")
        
    except Exception as e:
        print(f"❌ Setup failed: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())